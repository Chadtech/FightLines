use crate::view::text::text;
use seed::dom_entity_names::Tag;
use seed::prelude::{El, Node};
use std::borrow::Cow;

#[derive(Clone)]
#[allow(dead_code)]
pub enum Style {
    Batch(Vec<Style>),
    FlexCol,
    FlexRow,
    JustifyCenter,
    JustifyEnd,
    Grow,
    BorderR,
    BorderRContent0,
    BorderBContent0,
    BorderContent1,
    BorderContent2,
    BorderLContent2,
    P2,
    P3,
    P4,
    PY4,
    G3,
    G4,
    M2,
    MT4,
    TextImportant4,
    TextContent1,
    TextContent2,
    TextContent5,
    W4,
    W5,
    W7,
    W8,
    W8P5,
    W9,
    WA,
    W512px,
    WFull,
    W0D16,
    W1D16,
    W2D16,
    W3D16,
    W4D16,
    W5D16,
    W6D16,
    W7D16,
    W8D16,
    W9D16,
    W10D16,
    W11D16,
    W12D16,
    W13D16,
    W14D16,
    W15D16,
    W16D16,
    BgContent0,
    BgContent1,
    BgContent4,
    Outset,
    Inset,
    InsetImportant,
    BgBackground0,
    BgBackground1,
    BgBackground2,
    BgBackground4,
    BgBackground2Hover,
    BgBackground4Hover,
    BgImportant1,
    BgImportant4,
    BgProblem1,
    BgProblem5,
    BgSuccess5,
    BgBackDrop,
    H4,
    H5,
    H8,
    H512px,
    HFull,
    Relative,
    Absolute,
    OverflowHidden,
    Scroll,
    OutlineNone,
    Pointer,
    Hide,
    Implode,
    Screen,
    AbsoluteCenter,
    Left0,
    Left4,
    Left50Pct,
    Left8P5,
    Right0,
    Top0,
    Top50Pct,
    Bottom0,
    Bottom4,
    CursorPointer,
    CursorNone,
    TextSelectNone,
}

impl Style {
    pub fn none() -> Style {
        Style::Batch(vec![])
    }

    pub fn css_classes(self) -> Vec<&'static str> {
        match self {
            Style::FlexCol => vec!["flex-col"],
            Style::FlexRow => vec!["flex-row"],
            Style::JustifyCenter => vec!["justify-center"],
            Style::JustifyEnd => vec!["justify-end"],
            Style::Grow => vec!["grow"],
            Style::BorderR => vec!["border-r"],
            Style::BorderRContent0 => vec!["border-r-content-0"],
            Style::BorderBContent0 => vec!["border-b-content-0"],
            Style::BorderContent1 => vec!["border-content-1"],
            Style::BorderContent2 => vec!["border-content-2"],
            Style::BorderLContent2 => vec!["border-l-content-2"],
            Style::P2 => vec!["p-2"],
            Style::P3 => vec!["p-3"],
            Style::P4 => vec!["p-4"],
            Style::PY4 => vec!["py-4"],
            Style::G3 => vec!["g-3"],
            Style::G4 => vec!["g-4"],
            Style::M2 => vec!["m-2"],
            Style::MT4 => vec!["mt-4"],
            Style::Batch(styles) => styles
                .into_iter()
                .map(|style| style.css_classes())
                .collect::<Vec<Vec<&'static str>>>()
                .concat(),
            Style::TextImportant4 => vec!["text-important-4"],
            Style::TextContent1 => vec!["text-content-1"],
            Style::TextContent2 => vec!["text-content-2"],
            Style::TextContent5 => vec!["text-content-5"],
            Style::W4 => vec!["w-4"],
            Style::W5 => vec!["w-5"],
            Style::W7 => vec!["w-7"],
            Style::W8 => vec!["w-8"],
            Style::W8P5 => vec!["w-8p5"],
            Style::W9 => vec!["w-9"],
            Style::WA => vec!["w-a"],
            Style::WFull => vec!["w-full"],
            Style::BgContent0 => vec!["bg-content-0"],
            Style::BgContent1 => vec!["bg-content-1"],
            Style::BgContent4 => vec!["bg-content-4"],
            Style::Outset => vec!["outset"],
            Style::Inset => vec!["inset"],
            Style::InsetImportant => vec!["inset-important"],
            Style::BgBackground0 => vec!["bg-background-0"],
            Style::BgBackground1 => vec!["bg-background-1"],
            Style::BgBackground2 => vec!["bg-background-2"],
            Style::BgBackground4 => vec!["bg-background-4"],
            Style::BgBackground2Hover => vec!["bg-background-2-hover"],
            Style::BgBackground4Hover => vec!["bg-background-4-hover"],
            Style::BgProblem1 => vec!["bg-problem-1"],
            Style::BgProblem5 => vec!["bg-problem-5"],
            Style::BgSuccess5 => vec!["bg-success-5"],
            Style::BgImportant1 => vec!["bg-important-1"],
            Style::BgImportant4 => vec!["bg-important-4"],
            Style::H4 => vec!["h-4"],
            Style::H5 => vec!["h-5"],
            Style::H8 => vec!["h-8"],
            Style::HFull => vec!["h-full"],
            Style::Relative => vec!["relative"],
            Style::Absolute => vec!["absolute"],
            Style::OverflowHidden => vec!["overflow-hidden"],
            Style::Scroll => vec!["scroll"],
            Style::OutlineNone => vec!["outline-none"],
            Style::Pointer => vec!["pointer"],

            Style::Hide => vec!["hide"],
            Style::Implode => vec!["implode"],
            Style::Screen => vec!["screen"],
            Style::AbsoluteCenter => vec!["absolute-center"],
            Style::Left0 => vec!["left-0"],
            Style::Left4 => vec!["left-4"],
            Style::Left50Pct => vec!["left-50-pct"],
            Style::Left8P5 => vec!["left-8p5"],
            Style::Right0 => vec!["right-0"],
            Style::Top0 => vec!["top-0"],
            Style::Top50Pct => vec!["top-50-pct"],
            Style::Bottom0 => vec!["bottom-0"],
            Style::Bottom4 => vec!["bottom-4"],
            Style::W512px => vec!["w-512px"],
            Style::H512px => vec!["h-512px"],
            Style::CursorPointer => vec!["cursor-pointer"],
            Style::CursorNone => vec!["cursor-none"],
            Style::BgBackDrop => vec!["backdrop"],
            Style::TextSelectNone => vec!["text-select-none"],
            Style::W0D16 => vec!["w-0-16"],
            Style::W1D16 => vec!["w-1-16"],
            Style::W2D16 => vec!["w-2-16"],
            Style::W3D16 => vec!["w-3-16"],
            Style::W4D16 => vec!["w-4-16"],
            Style::W5D16 => vec!["w-5-16"],
            Style::W6D16 => vec!["w-6-16"],
            Style::W7D16 => vec!["w-7-16"],
            Style::W8D16 => vec!["w-8-16"],
            Style::W9D16 => vec!["w-9-16"],
            Style::W10D16 => vec!["w-10-16"],
            Style::W11D16 => vec!["w-11-16"],
            Style::W12D16 => vec!["w-12-16"],
            Style::W13D16 => vec!["w-13-16"],
            Style::W14D16 => vec!["w-14-16"],
            Style::W15D16 => vec!["w-15-16"],
            Style::W16D16 => vec!["w-16-16"],
        }
    }
}

const GLOBAL_STYLING: &str = include_str!("style.css");

pub fn global_html<Msg>() -> Node<Msg> {
    let mut element: El<Msg> = El::empty(Tag::Custom(Cow::Borrowed("style")));

    element.children.push(text(GLOBAL_STYLING));

    Node::Element(element)
}
