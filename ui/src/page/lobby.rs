use crate::global;
use crate::view::cell::Row;
use seed::prelude::Orders;

///////////////////////////////////////////////////////////////
// Types
///////////////////////////////////////////////////////////////

pub struct Model;

#[derive(Clone, Debug)]
pub enum Msg {
    Msg,
}

///////////////////////////////////////////////////////////////
// Init
///////////////////////////////////////////////////////////////

pub fn init() -> Model {
    Model
}

///////////////////////////////////////////////////////////////
// Update
///////////////////////////////////////////////////////////////

pub fn update(
    _global: &global::Model,
    msg: Msg,
    _model: &mut Model,
    _orders: &mut impl Orders<Msg>,
) {
    match msg {
        Msg::Msg => {}
    }
}

///////////////////////////////////////////////////////////////
// View
///////////////////////////////////////////////////////////////

pub fn view(_model: &Model) -> Vec<Row<Msg>> {
    vec![]
}
